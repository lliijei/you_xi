源函数1!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
#define _CRT_SECURE_NO_WARNINGS //忽略安全检测，不然使用scanf会报错
#include<stdio.h>
#include"game.h"
void memu()
{
	printf("****************************\n");
	printf("*******1.play   0.exit******\n");
	printf("****************************\n");
}
void game()// $$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$￥￥￥￥￥￥￥￥￥￥￥￥￥￥游戏的整个算法实现
{
	char ret = 0;
	char board[ROW][COL] = {0};
	InitBoard(board, ROW, COL);
	DdisplayBoard(board, ROW, COL);
	while (1)
    {
	    PlayerMove(board, ROW, COL);
	    DdisplayBoard(board, ROW, COL);
		ComputerMove(board, ROW, COL);
		DdisplayBoard(board, ROW, COL);
		ret = IsWin(board, ROW, COL);//#电脑赢,*玩家赢,c继续下，q满了
		if (ret!='C')
		{
			break;
		}
	}
	if (ret == '*')
	{
		printf("玩家赢\n");
	}
	else if(ret=='#')
	{
		printf("电脑赢\n");
	}
}
void test()
{
	int input = 0;
	do
	{
		memu();
		printf("请选择: ");
		scanf("%d", &input);
		switch (input)
		{
		   case 1:
			   game();
			   break;
			case 0:
				printf("推出游戏\n");
				break;
			default:
			    printf("选择错误，请重新选择\n");
				break;
		}
	} 
	while (input);
}
int main()
{
	test();
	return 0;
}
源函数2！！！！！！！！！！！！！！！！！！！！！！！！！！！！！！！！！！！！！！！！！！！！！！！！！！！！！！！！！！！！！！！！！！！！！！！！！！！！！！！！！！！！！！！！！！！！！！
#define _CRT_SECURE_NO_WARNINGS //忽略安全检测，不然使用scanf会报错
#include"game.h"
void InitBoard(char board[ROW][COL], int row, int col)//初始化坐标
{
	int i = 0;
	int j = 0;
	for (i = 0; i < row; i++)
	{
		for (j = 0; j < col; j++)
		{
			board[i][j] =' ';
		}
	}
}
void DdisplayBoard(char board[ROW][COL], int row, int col)//初始化棋盘或更新棋盘状态
{
	int i = 0;
	for (i = 0; i < row; i++)
	{
		int j = 0;
		for (j = 0; j < col; j++)
		{
			printf(" %c ", board[i][j]);
			if (j < col - 1)
				printf("|");
		}
		printf("\n");//$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$  分割
		if (i < row - 1)//运行到这儿i=3
		{
			for (j = 0; j <col; j++)
			{
				printf("---");
				if (j < col - 1)
					printf("|");
			}
			printf("\n");
		}
	}
}
void PlayerMove(char board[ROW][COL], int row, int col)//玩家走
{
	int x = 0;
	int y = 0;
	printf("玩家走：");
		while (1)
		{
			printf("请输入要下的坐标：\n");
			scanf("%d%d", &x, &y);
			if (x >= 1 && x <= row && y >= 1 && y <= col)//判断xy坐标的合法性
			{
				if (board[x - 1][y - 1] == ' ')//判断坐标是否被占
				{
					board[x - 1][y - 1] = '*';
					break;
				}
				else
				{
					printf("该坐标被占用");
				}
			}
			else
			{
				printf("坐标非法，请重新输入！\n");
			}
		}
}
void ComputerMove(char board[ROW][COL], int row, int col)
{
	int x = 0;
	int y = 0;
	printf("电脑走：\n");
	while (1)
	{
		x = rand()%row;
		y = rand() % col;
		if (board[x][y] == ' ')//判断坐标是否被占
		{
			board[x][y] = '#';
			break;
		}
	}
}
int IsFull(char board[ROW][COL], int row, int col)
{
	int i = 0;
	int j = 0;
	for (i = 0; i < row; i++)
	{
		for (j = 0; j < col; j++)
		{
			if (board[i][j]==' ')
			{
				return 0;
			}
		}
	}
	return 1;
}
char IsWin(char board[ROW][COL], int row, int col)//#电脑赢,*玩家赢,c继续下,q平局
{
	int i = 0;
	for (i = 0; i < row; i++)
	{
		if (board[i][0]==board[i][1]&&board[i][1]==board[i][2]&& board[i][1] !=' ')//竖列成三
		{
			return board[i][1];
		}
	}
	for (i = 0; i < col; i++)
	{
		if (board[0][i] == board[1][i]&& board[1][i] == board[2][i]  && board[1][i] != ' ')//行排成三
		{
			return board[1][i];
		}
	}
	if (board[0][0] == board[1][1] && board[1][1] == board[2][2] &&  board[1][1] !=' ')//对角线成三
		return board[1][1];
	if (board[2][0] == board[1][1] && board[1][1] == board[0][2] && board[1][1] !=' ')//对角线成三
		return board[1][1];
	if (1 == IsFull(board, ROW, COL))
	{return 'Q';}
	return 'C';
}
头文件！！！！！！！！！！！！！！！！！！！！！！！！！！！！！！！！！！！！！！！！！！！！！！！！！！！！！！！！！！！！！！！！！！！！！！！！！！！！！！！！！！！！！！！！！
#include<stdio.h>
#include<stdlib.h>
#include<time.h>
#define ROW 3
#define COL 3
void InitBoard(char board[ROW][COL], int row, int col);
void DdisplayBoard(char board[ROW][COL], int row, int col);
void ComputerMove(char board[ROW][COL], int row, int col);
void PlayerMove(char board[ROW][COL], int row, int col);
char IsWin(char board[ROW][COL], int row, int col);
